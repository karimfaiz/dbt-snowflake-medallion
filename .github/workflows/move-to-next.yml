name: Move to Next Env

on:
  workflow_dispatch:

jobs:
  create-pull-request:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Determine Source and Target Branch
      id: branches
      run: |
        if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
          echo "source=develop" >> $GITHUB_ENV
          echo "target=integration" >> $GITHUB_ENV
        elif [[ "${GITHUB_REF}" == "refs/heads/integration" ]]; then
          echo "source=integration" >> $GITHUB_ENV
          echo "target=main" >> $GITHUB_ENV
        else
          echo "Invalid source branch"
          exit 1
        fi
      shell: bash

    - name: Create Pull Request
      id: create_pr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        base: ${{ env.target }}
        head: ${{ env.source }}
        title: 'Move code from ${{ env.source }} to ${{ env.target }}'
        body: 'Automated PR to move code from ${{ env.source }} branch to ${{ env.target }} branch'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-pull-request:
    runs-on: ubuntu-latest
    needs: create-pull-request

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Merge the Pull Request
      uses: actions/github-script@v6
      with:
        script: |
          const pr = await github.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base: process.env.GITHUB_REF.split('/').slice(-1)[0] === 'develop' ? 'integration' : 'main',
            head: process.env.GITHUB_REF.split('/').slice(-1)[0],
            title: `Move code from ${process.env.GITHUB_REF.split('/').slice(-1)[0]} to ${process.env.GITHUB_REF.split('/').slice(-1)[0] === 'develop' ? 'integration' : 'main'}`,
            body: `Automated PR to move code from ${process.env.GITHUB_REF.split('/').slice(-1)[0]} branch to ${process.env.GITHUB_REF.split('/').slice(-1)[0] === 'develop' ? 'integration' : 'main'} branch`,
          });

          await github.pulls.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.data.number,
            merge_method: 'merge',
          });
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
